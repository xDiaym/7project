import logging
import os
from typing import Optional

from dotenv import load_dotenv
from vkbottle.bot import Bot, Message
from vkbottle.dispatch.rules.bot import FuncRule
from vkbottle.tools.dev_tools.mini_types.bot import MessageMin
from vkbottle_types.objects import MessagesMessageActionStatus

from homework_storage.mongo import HomeworkStorage

load_dotenv()

BOT_ID = os.environ.get("BOT_ID")

storage = HomeworkStorage(
    os.environ.get("DB_NAME"), os.environ.get("COLLECTION")
)

bot = Bot(os.environ.get("BOT_TOKEN"))

logging.basicConfig(level=logging.DEBUG)


@bot.on.chat_message(
    text=["/–¥–æ–±–∞–≤–∏—Ç—å <lesson> <homework>", "/–¥–æ–±–∞–≤–∏—Ç—å <lesson>", "/–¥–æ–±–∞–≤–∏—Ç—å"]
)
async def set_homework(
    message: Message,
    lesson: Optional[str] = None,
    homework: Optional[str] = None,
) -> None:
    if lesson is None or homework is None:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–¥–æ–±–∞–≤–∏—Ç—å <lesson> <homework>")
    else:
        await storage.set_homework(message.group_id, lesson, homework)
        await message.answer(
            f'–û—Ç–ª–∏—á–Ω–æ! üëç –Ø –∑–∞–ø–æ–º–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{lesson}"'
        )


@bot.on.chat_message(text=["/–∑–∞–¥–∞–Ω–∏–µ <lesson>", "/–∑–∞–¥–∞–Ω–∏–µ"])
async def get_homework(message: Message, lesson: Optional[str] = None) -> None:
    if lesson is None:
        await message.answer(f"‚ùå –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç!")
    else:
        homework = await storage.get_homework(message.group_id, lesson)
        if homework is not None:
            await message.answer(
                f'‚úîÔ∏è –ó–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{lesson.lower()}":\n{homework}'
            )
        else:
            await message.answer("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ/–ø—Ä–µ–¥–º–µ—Ç")


def has_bot_invited(message: MessageMin) -> bool:
    return (
        message and
        message.action.type == MessagesMessageActionStatus.CHAT_INVITE_USER
        and message.action.member_id == BOT_ID
    )


@bot.on.chat_message(text=["/–ø–æ–º–æ—â—å"])
@bot.on.chat_message(FuncRule(has_bot_invited))
async def help_(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è "
        "–¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º.\n"
        "üìö –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/–¥–æ–±–∞–≤–∏—Ç—å [–ø—Ä–µ–¥–º–µ—Ç] [–∑–∞–¥–∞–Ω–∏–µ] - –¥–æ–±–∞–≤–∏—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ "
        "–≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É\n"
        "/–∑–∞–¥–∞–Ω–∏–µ [–ø—Ä–µ–¥–º–µ—Ç] - –æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É\n"
        "/–ø–æ–º–æ—â—å - –æ—Ç–ø—Ä–∞–≤–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )


if __name__ == "__main__":
    bot.run_forever()
